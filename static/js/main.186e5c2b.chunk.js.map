{"version":3,"sources":["dataSources/useRecords.js","components/Graph.js","components/QueryInput.js","dataSources/corsRequest.js","dataSources/philPapers.js","App.js","serviceWorker.js","index.js"],"names":["blackList","splitOn","propNames","getWords","record","R","propName","split","stemmer","stem","Graph","_ref","queries","yearRange","recordSet$","colorMap","_yearRange","Object","slicedToArray","start","end","_useRecordSets","state","useRef","records","stemsToRecords","yearsToRecords","_useState","useState","_useState2","recordCount","setRecordCount","useEffect","subscription","subscribe","recordSet","_state$current","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","id","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","word","push","err","return","year","count","length","unsubscribe","useRecordSets","queryIds","keys","groupedByYear","_ref2","_ref3","queryId","query","objectSpread","getRecordIds","data","group","dataPoint","total","getTotal","react_default","a","createElement","es6","width","height","dataKey","map","key","type","stroke","QueryInput","setQuery","color","input$","useMemo","Subject","pipe","debounceTime","q","tabIndex","Number","autoFocus","style","display","alignItems","borderRadius","backgroundColor","margin","onChange","e","input","target","defaultValue","border","outline","fontSize","background","borderBottom","observeCorsRequest","url","fromFetch","concat","xml","parser","escapeCharacter","char","getTokenSuffix","token","join","escape","getLastPartOfPath","path","match","_wrapRegExp","groups","getRecordMetadata","metadata","_i","_Object$entries","entries","prop","title","String","identifier","date","author","creator","getRecordSet$","Rx","response","text","_xml$parse$OAIPMH$Li","parse","ListRecords","resumptionToken","Observable","filter","language","json","array","q0","q1","q2","q3","Boolean","window","location","hostname","ReactDOM","render","_useUrlSearchParams","useUrlSearchParams","_useUrlSearchParams2","setQueries","defineProperty","className","QueryInput_QueryInput","Graph_Graph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.186e5c2b.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport * as R from 'ramda';\r\nimport stemmer from 'lancaster-stemmer';\r\n\r\nconst blackList = /^([0-9]+|s|a|aa|at|an|the|of|on|and|to|in|for)$/;\r\nconst splitOn = /[\\-\\[\\]\\s,.–_'’();:/\"”]/;\r\nconst propNames = ['title', 'description'];\r\nconst getWords = record =>\r\n  R.pipe(\r\n    R.chain(propName =>\r\n      record[propName]\r\n      ? record[propName].split(splitOn)\r\n      : []),\r\n    R.map(stemmer),\r\n    R.filter(stem =>\r\n      !R.isEmpty(stem) &&\r\n      R.isEmpty(R.match(blackList, stem))),\r\n    R.uniq,\r\n  )(propNames);\r\n\r\nexport const useRecordSets = (recordSet$) => {\r\n  // We've implemented our data store as a large mutable ref.\r\n  // We have no interest in old versions of the data\r\n  // and the constant copying & spreading caused significant slowdown.\r\n  // We track the total count of records with the useState hook to enforce that rerenders occur when new data is loaded.\r\n\r\n  const state = useRef({\r\n    records: {},\r\n    stemsToRecords: {},\r\n    yearsToRecords: {},\r\n  });\r\n  const [recordCount, setRecordCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const subscription = recordSet$.subscribe(recordSet => {\r\n\r\n      const {\r\n        records,\r\n        stemsToRecords,\r\n        yearsToRecords,\r\n      } = state.current;\r\n\r\n      for (const record of recordSet) {\r\n        records[record.id] = record;\r\n\r\n        for (const word of getWords(record)) {\r\n          if (stemsToRecords[word] === undefined) {\r\n            stemsToRecords[word] = [record.id];\r\n          } else {\r\n            stemsToRecords[word].push(record.id);\r\n          }\r\n        }\r\n\r\n        const { year } = record;\r\n        if (yearsToRecords[year] === undefined) {\r\n          yearsToRecords[year] = [record.id];\r\n        } else {\r\n          yearsToRecords[year].push(record.id);\r\n        }\r\n      }\r\n\r\n      setRecordCount(count => count + recordSet.length);\r\n    });\r\n    return () => subscription.unsubscribe();\r\n  }, [recordSet$]);\r\n\r\n  return { recordCount, state };\r\n};\r\n","import React from 'react';\r\nimport { useRecordSets as useRecordSets } from '../dataSources/useRecords';\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  Line,\r\n  Tooltip,\r\n} from 'recharts';\r\nimport * as R from 'ramda';\r\nimport stem from 'lancaster-stemmer';\r\n\r\nexport const Graph = ({ queries, yearRange, recordSet$, colorMap }) => {\r\n  const [ start, end ] = yearRange;\r\n  const {\r\n    recordCount,\r\n    state,\r\n  } = useRecordSets(recordSet$);\r\n  const {\r\n    records,\r\n    stemsToRecords,\r\n    yearsToRecords,\r\n  } = state.current;\r\n\r\n  const queryIds = Object.keys(queries);\r\n  const getTotal = year => yearsToRecords[year]\r\n    ? yearsToRecords[year].length\r\n    : 0;\r\n\r\n  const getRecordIds = query => stemsToRecords[stem(query)] || [];\r\n\r\n  const groupedByYear = R.pipe(\r\n    R.toPairs,\r\n    R.chain(([queryId, query]) =>\r\n      R.map(\r\n        id => ({ ...records[id], queryId }),\r\n        getRecordIds(query)\r\n      )\r\n    ),\r\n    R.groupBy(R.prop('year'))\r\n  )(queries);\r\n\r\n  const data = R.map(\r\n    year => {\r\n      const group = groupedByYear[year] || [];\r\n      const dataPoint = R.pipe(\r\n        R.map(queryId => {\r\n          const total = getTotal(year);\r\n          if (total === 0) return [queryId, 0];\r\n          const containingQuery = R.filter(R.propEq('queryId', queryId), group);\r\n          const percentage = 100 * containingQuery.length / total;\r\n          return [queryId, percentage];\r\n        }),\r\n        R.fromPairs,\r\n      )(queryIds);\r\n      dataPoint.year = year;\r\n      return dataPoint;\r\n    },\r\n    R.range(start, end + 1)\r\n  );\r\n\r\n  return (\r\n    <LineChart width={1200} height={500} data={data}>\r\n      <Tooltip />\r\n      <XAxis dataKey=\"year\"/>\r\n      <YAxis />\r\n      {queryIds\r\n        .map(queryId => (\r\n          <Line\r\n            key={queryId}\r\n            type=\"linear\"\r\n            dataKey={queryId}\r\n            stroke ={colorMap[queryId]}\r\n          />\r\n        ))\r\n      }\r\n    </LineChart>\r\n  );\r\n}\r\n","import React, { useEffect, useMemo } from 'react';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nexport const QueryInput = ({ id, setQuery, query, color }) => {\n\n  const input$ = useMemo(() => new Subject().pipe(debounceTime(400)), []);\n  const onInput = input => input$.next(input);\n  useEffect(() => {\n    input$.subscribe(q => setQuery(id, q));\n  }, [input$, setQuery, id]);\n\n  const tabIndex = Number(id[1] + 1);\n  const autoFocus = tabIndex === 1;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n      }}>\n      <div\n        style={{\n          height: '17px',\n          width: '17px',\n          borderRadius: '100%',\n          backgroundColor: color,\n          margin: '0px 20px',\n        }}\n      />\n      Trend line for:\n      <input\n        tabIndex={tabIndex}\n        autoFocus={autoFocus}\n        type=\"text\"\n        onChange={e => onInput(e.target.value)}\n        defaultValue={query}\n        style={{\n          margin:'10px',\n          border: 0,\n          outline: 0,\n          fontSize: '16pt',\n          color: 'white',\n          background: 'transparent',\n          borderBottom: '1px solid grey',\n        }}\n      />\n    </div>\n  );\n};\n","import { fromFetch } from 'rxjs/fetch';\n\nconst corsAnywhere = 'https://cors-holy-water.herokuapp.com/';\n\nconst isProduction = process.env.NODE_ENV === \"production\";\nexport const observeCorsRequest = url =>\n  isProduction\n  ? fromFetch(`${corsAnywhere}${url}`)\n  : fromFetch(url);","import parser from 'fast-xml-parser';\r\nimport * as Rx from 'rxjs/operators';\r\nimport * as Observable from 'rxjs';\r\nimport { observeCorsRequest } from './corsRequest';\r\nconst xml = parser;\r\n\r\nconst escapeCharacter = char => {\r\n  switch (char) {\r\n    case '/': return '%2F';\r\n    case '?': return '%3F';\r\n    case '#': return '%23';\r\n    case '=': return '%3D';\r\n    case ':': return '%3A';\r\n    case ';': return '%3B';\r\n    case ' ': return '%20';\r\n    case '%': return '%25';\r\n    case '+': return '%2B';\r\n    default: return char;\r\n  }\r\n};\r\nconst escape = token => token.split().map(escapeCharacter).join();\r\n\r\nconst getTokenSuffix = token =>\r\n  token\r\n  ? `&resumptionToken=${escape(token)}`\r\n  : '';\r\n\r\nexport const getRecordSet$ = (token) =>\r\n  observeCorsRequest(\r\n      `https://philpapers.org/oai.pl?verb=ListRecords&metadataPrefix=oai_dc${getTokenSuffix(token)}`)\r\n  .pipe(\r\n    Rx.flatMap(response => response.text()),\r\n    Rx.flatMap(text => {\r\n      const {\r\n        record: records,\r\n        resumptionToken: token,\r\n      } = xml.parse(text)['OAI-PMH'].ListRecords;\r\n\r\n      return Observable.concat(\r\n        [records],\r\n        getRecordSet$(token)\r\n      );\r\n    })\r\n  );\r\n\r\nconst getLastPartOfPath = path => path.match(/^.*\\/(?<key>.*)$/).groups.key;\r\nconst getPropName = dcPropName => dcPropName.match(/^dc:(?<prop>\\w+)$/).groups.prop;\r\n\r\nconst getRecordMetadata = record => {\r\n  const metadata = {};\r\n  for (const [key, value] of Object.entries(record.metadata['oai_dc:dc'])) {\r\n    const prop = getPropName(key);\r\n    metadata[prop] = value;\r\n  }\r\n\r\n  metadata.title = metadata.title ? String(metadata.title) : null;\r\n  metadata.id = getLastPartOfPath(metadata.identifier);\r\n  delete metadata.identifier;\r\n\r\n  metadata.year = metadata.date;\r\n  delete metadata.date;\r\n\r\n  metadata.type = getLastPartOfPath(metadata.type);\r\n\r\n  metadata.author = metadata.creator;\r\n  delete metadata.creator;\r\n\r\n  return metadata;\r\n}\r\n\r\nexport const recordSet$ = getRecordSet$()\r\n  .pipe(\r\n    Rx.map(recordSet =>\r\n      recordSet\r\n        .map(getRecordMetadata)\r\n        .filter(record =>\r\n          record.language === 'en' &&\r\n          record.title &&\r\n          typeof record.year === 'number'\r\n        ),\r\n    ),\r\n  );\r\n\r\n  // ToDo: Figure out how to parse and decompress data from archive.\r\nconst getDoc = id => observeCorsRequest(`https://philPapers.org/archive/${id}`);\r\n\r\nconst apiId = '904518';\r\nconst apiKey = '5KLo4qkvXNl4t8s5';\r\n\r\nexport const category$ =\r\n  observeCorsRequest(\r\n      `https://philPapers.org/philpapers/raw/categories.json?apiId=${apiId}&apiKey=${apiKey}`)\r\n  .pipe(\r\n    Rx.flatMap(response => response.json()),\r\n    Rx.map(array => array[0])\r\n  );\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Graph } from './components/Graph';\r\nimport { QueryInput } from './components/QueryInput';\r\nimport { recordSet$ } from './dataSources/philPapers';\r\nimport { useUrlSearchParams } from 'use-url-search-params';\r\nimport * as R from 'ramda';\r\n\r\nconst colorMap = {\r\n  q0: 'blue',\r\n  q1: 'purple',\r\n  q2: 'green',\r\n  q3: 'grey',\r\n};\r\n\r\nexport const App = () => {\r\n  const [ queries, setQueries ] = useUrlSearchParams({q0: 'good', q1: 'governance'});\r\n\r\n  const addQuery = query =>\r\n    setQueries(queries => ({\r\n      ...queries,\r\n      [`q${Object.keys(queries).length}`]: query\r\n    }));\r\n\r\n  const setQuery = (queryId, query) => {\r\n    setQueries({\r\n      ...queries,\r\n      [queryId]: query,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {R.pipe(\r\n          R.toPairs,\r\n          R.map(([queryId, query]) => (\r\n            <QueryInput\r\n              key={queryId}\r\n              id={queryId}\r\n              color={colorMap[queryId]}\r\n              query={query}\r\n              setQuery={setQuery}\r\n            />\r\n          ))\r\n        )(queries)}\r\n        <Graph\r\n          queries={queries}\r\n          colorMap={colorMap}\r\n          recordSet$={recordSet$}\r\n          yearRange={[2000, 2018]}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}