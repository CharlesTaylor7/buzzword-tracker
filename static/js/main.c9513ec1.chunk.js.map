{"version":3,"sources":["logo.svg","philPapers/streams.js","serviceWorker.js","index.js","App.js","philPapers/usePhilPapers.js"],"names":["module","exports","__webpack_require__","p","xml","parser","escapeCharacter","char","getLastPartOfPath","path","match","_wrapRegExp","key","groups","record$","recordSet$","token","fromFetch","concat","split","map","join","escape","pipe","Rx","response","text","_xml$parse$OAIPMH$Li","parse","ListRecords","records","record","resumptionToken","Observable","metadata","_i","_Object$entries","Object","entries","length","_ref3","_ref2","slicedToArray","value","prop","title","String","id","identifier","type","subject","console","log","JSON","stringify","language","date","json","array","Boolean","window","location","hostname","ReactDOM","render","react_default","a","createElement","_usePhilPapers","_useState","useState","stemsToRecords","_useState2","state","setState","useEffect","subscribe","blackList","words","R","stem","copy","objectSpread","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","word","toConsumableArray","err","return","defineProperty","usePhilPapers","recordCount","keys","recordIds","data","_ref","year","group","trend","count","amt","className","es6","width","height","dataKey","stroke","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9513ec1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import parser from 'fast-xml-parser';\nimport { fromFetch } from 'rxjs/fetch';\nimport * as Rx from 'rxjs/operators';\nimport * as Observable from 'rxjs';\nimport * as R from 'ramda';\n\nconst xml = parser;\n\nconst escapeCharacter = char => {\n  switch (char) {\n    case '/': return '%2F';\n    case '?': return '%3F';\n    case '#': return '%23';\n    case '=': return '%3D';\n    case ':': return '%3A';\n    case ';': return '%3B';\n    case ' ': return '%20';\n    case '%': return '%25';\n    case '+': return '%2B';\n    default: return char;\n  }\n};\nconst escape = token => token.split().map(escapeCharacter).join();\n\nconst recordSet$ = (token) => fromFetch(`https://philpapers.org/oai.pl?verb=ListRecords&metadataPrefix=oai_dc${token ? `&resumptionToken=${escape(token)}` : ''}`)\n  .pipe(\n    Rx.flatMap(response => response.text()),\n    Rx.flatMap(text => {\n      const {\n        record: records,\n        resumptionToken,\n      } = xml.parse(text)['OAI-PMH'].ListRecords;\n\n      // return records;\n      return Observable.concat(\n        Observable.from(records),\n        recordSet$(resumptionToken)\n      );\n    })\n  );\n\nconst getLastPartOfPath = path => path.match(/^.*\\/(?<key>.*)$/).groups.key;\nconst getPropName = dcPropName => dcPropName.match(/^dc:(?<prop>\\w+)$/).groups.prop;\n\nconst getRecordMetadata = record => {\n  const metadata = {};\n  for (const [key, value] of Object.entries(record.metadata['oai_dc:dc'])) {\n    const prop = getPropName(key);\n    metadata[prop] = value;\n  }\n\n  metadata.title = metadata.title ? String(metadata.title) : null;\n  metadata.id = getLastPartOfPath(metadata.identifier);\n  delete metadata.identifier;\n\n  metadata.type = getLastPartOfPath(metadata.type);\n\n  if (metadata.subject !== 'Philosophy'){\n    console.log(JSON.stringify(metadata));\n    debugger;\n  }\n  return metadata;\n}\n\nexport const record$ = recordSet$()\n  .pipe(\n    Rx.map(getRecordMetadata),\n    Rx.filter(record =>\n      record.language === 'en' &&\n      record.title &&\n      typeof record.date === 'number'\n    ),\n  );\n\n// ToDo: Figure out how to parse and decompress data from archive.\nconst getDoc = id => fromFetch(`https://philpapers.org/archive/${id}`);\n\nconst apiId = '904518';\nconst apiKey = '5KLo4qkvXNl4t8s5';\n\nexport const category$ = fromFetch(`https://philpapers.org/philpapers/raw/categories.json?apiId=${apiId}&apiKey=${apiKey}`)\n  .pipe(\n    Rx.flatMap(response => response.json()),\n    Rx.map(array => array[0])\n  );\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { usePhilPapers } from './philPapers/usePhilPapers';\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Line,\r\n} from 'recharts';\r\nimport * as R from 'ramda';\r\nimport stem from 'lancaster-stemmer';\r\n\r\nexport const App = () => {\r\n  const { stemsToRecords, records } = usePhilPapers();\r\n  const recordCount = Object.keys(records).length;\r\n  const queryWord = 'problem';\r\n  const recordIds = stemsToRecords[stem(queryWord)];\r\n  const data = recordIds\r\n    ? R.pipe(\r\n        R.map(id => records[id]),\r\n        R.groupBy(R.prop('date')),\r\n        R.toPairs,\r\n        R.map(([year, group]) => ({\r\n          year,\r\n          trend: year,\r\n          count: group.length,\r\n          amt: group.length,\r\n        })),\r\n      )(recordIds)\r\n    : [];\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>Trending: \"{queryWord}\" (Checked against {recordCount} records)</p>\r\n        <LineChart width={1200} height={500} data={data}>\r\n          <XAxis dataKey=\"year\"/>\r\n          <YAxis />\r\n          <Line type=\"monotone\" dataKey=\"count\" stroke=\"#8484d8\" />\r\n        </LineChart>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\nimport { record$ } from './streams';\nimport * as R from 'ramda';\nimport stem from 'lancaster-stemmer';\n\nexport const usePhilPapers = () => {\n  // state: { lookup: { [stem: string]: RecordId[] }, recordCount: number }\n  // where RecordId = string\n  // a map from word stems to a list of records containing that stem.\n  // The frequency of a stem is size of its dictionary entry divided by the record count.\n  const [ state, setState ] = useState({ stemsToRecords: {}, records: {} });\n\n  useEffect(() => {\n    record$.subscribe(record => {\n      const blackList = /^([0-9]+|s|the|of|on|and|to|in|at|for)$/\n      const words = R.pipe(\n        R.prop('title'),\n        R.split(/[\\s,.\\-_'’]/),\n        R.map(stem),\n        R.filter(stem => !R.isEmpty(stem) && R.isEmpty(R.match(blackList, stem))),\n        R.uniq,\n      )(record);\n\n      setState(state => {\n        const { stemsToRecords, records } = state;\n        const copy = { ...stemsToRecords };\n        for (const word of words) {\n          if (copy[word] === undefined) {\n            copy[word] = [record.id];\n          } else {\n            copy[word] = [...copy[word], record.id];\n          }\n        }\n        const withNewRecord = {...records, [record.id]: record}\n        return { stemsToRecords: copy, records: withNewRecord };\n      });\n    });\n  }, []);\n\n  return state;\n};\n"],"sourceRoot":""}