{"version":3,"sources":["components/Graph.js","components/Query.js","components/NewQueryButton.js","dataSources/textUtilities.js","components/QueryBar.js","dataSources/corsRequest.js","dataSources/philPapers.js","hooks/useRecordSets.js","hooks/useGraphData.js","components/App.js","serviceWorker.js","index.js","hooks/useUrlQuery.js"],"names":["Graph","_ref","queryIds","colorMap","data","react_default","a","createElement","className","es6","width","height","dataKey","angle","value","position","offset","style","textAnchor","map","queryId","key","type","stroke","strokeWidth","dot","Query","tabIndex","setQuery","deleteQuery","query","color","input$","useMemo","Subject","pipe","debounceTime","useEffect","subscription","subscribe","unsubscribe","backgroundColor","autoFocus","onChange","event","input","target","next","placeholder","defaultValue","onClick","NewQueryButton","blackList","splitOn","propNames","getNumberFromQueryId","Number","match","_wrapRegExp","index","groups","QueryBar","urlQuery","addQuery","queryAsString","Object","values","join","queryCount","keys","length","queryInputs","R","_ref2","_ref3","slicedToArray","Query_Query","NewQueryButton_NewQueryButton","observeCorsRequest","url","fromFetch","concat","xml","parser","escapeCharacter","char","getTokenSuffix","token","split","escape","getLastPartOfPath","path","philPapers_wrapRegExp","getRecordMetadata","record","metadata","_i","_Object$entries","entries","prop","title","String","id","identifier","year","date","author","creator","recordSet$","getRecordSet$","Rx","response","text","_xml$parse$OAIPMH$Li","parse","ListRecords","records","resumptionToken","Observable","recordSet","filter","language","json","array","getWords","propName","stemmer","stem","useGraphData","yearRange","queries","_yearRange","start","end","_useRecordSets","state","useRef","stemsToRecords","yearsToRecords","_useState","useState","_useState2","recordCount","setRecordCount","_state$current","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","word","push","err","return","count","useRecordSets","getRecordIds","recordIdSets","reduce","groupedByYear","objectSpread","toLowerCase","includes","includesCaseInsensitive","getRecords","group","dataPoint","total","getTotal","q0","q1","q2","q3","q4","q5","defaultState","Boolean","window","location","hostname","ReactDOM","render","_useUrlQuery","initialQuery","dummy","setDummy","ref","URLSearchParams","append","urlSearchParams","incrementDummy","syncWithURL","history","replaceState","pathname","Array","from","lastQueryId","set","delete","useUrlQuery","QueryBar_QueryBar","Graph_Graph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.895d73e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Graph.css\";\r\nimport {\r\n  ResponsiveContainer,\r\n  Label,\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  Line,\r\n  Tooltip,\r\n} from 'recharts';\r\n\r\nexport const Graph = ({ queryIds, colorMap, data }) => {\r\n  return (\r\n    <div className=\"graph\">\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart data={data}>\r\n          <Tooltip />\r\n          <XAxis dataKey=\"year\" height={50} >\r\n            <Label\r\n              angle={0}\r\n              value='year'\r\n              position='insideTop'\r\n              offset={30}\r\n              style={{textAnchor: 'middle'}}\r\n            />\r\n          </XAxis>\r\n          <YAxis>\r\n            <Label\r\n              angle={-90}\r\n              value='percentage (%)'\r\n              position='insideLeft'\r\n              style={{textAnchor: 'middle'}}\r\n            />\r\n          </YAxis>\r\n          {queryIds\r\n            .map(queryId => (\r\n              <Line\r\n                key={queryId}\r\n                type=\"linear\"\r\n                dataKey={queryId}\r\n                stroke ={colorMap[queryId]}\r\n                strokeWidth={3}\r\n                dot={false}\r\n              />\r\n            ))\r\n          }\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useMemo } from 'react';\nimport './Query.css';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nexport const Query = ({ tabIndex, setQuery, deleteQuery, query, color }) => {\n  const input$ = useMemo(() => new Subject().pipe(debounceTime(400)), []);\n  const onInput = input => input$.next(input);\n  useEffect(() => {\n    const subscription = input$.subscribe(setQuery);\n    return () => subscription.unsubscribe();\n  }, [input$]);\n\n  return (\n    <div className=\"query\">\n      <div\n        className=\"query__color-indicator\"\n        style={{backgroundColor: color}}\n      />\n      <input className=\"query__input\"\n        tabIndex={tabIndex}\n        autoFocus={tabIndex === 1}\n        type=\"text\"\n        onChange={event => onInput(event.target.value)}\n        placeholder=\"Search\"\n        defaultValue={query}\n      />\n      <button\n        className=\"query__delete button\"\n        onClick={deleteQuery}\n      >\n        ×\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './NewQueryButton.css';\n\nexport const NewQueryButton = ({ onClick }) => {\n  return (\n    <button\n      className=\"button button__new-query\"\n      onClick={onClick}\n    >\n      + query\n    </button>\n  )\n}\n","\nexport const blackList = /^([0-9]+|s|a|aa|at|an|the|of|on|and|to|in|for)$/;\nexport const splitOn = /[\\-\\[\\]\\s,.–_'’();:/\"”]/;\nexport const propNames = ['title', 'description'];\n\nexport const getNumberFromQueryId = queryId => Number(queryId.match(/^q(?<index>\\d+)$/).groups.index);","import React, { useMemo } from 'react';\nimport './QueryBar.css';\nimport { Query } from './Query';\nimport { NewQueryButton } from './NewQueryButton';\nimport * as R from 'ramda';\nimport { getNumberFromQueryId } from '../dataSources/textUtilities';\n\nexport const QueryBar = ({\n  colorMap,\n  urlQuery,\n  setQuery,\n  addQuery,\n  deleteQuery,\n}) => {\n  const queryAsString = Object.values(urlQuery).join('&');\n  const queryCount = Object.keys(urlQuery).length;\n  const queryInputs = useMemo(() =>\n    R.pipe(\n      R.toPairs,\n      R.map(([queryId, query]) => (\n        <Query\n          key={queryId}\n          tabIndex={getNumberFromQueryId(queryId) + 1}\n          color={colorMap[queryId]}\n          query={query}\n          setQuery={query => setQuery(queryId, query)}\n          deleteQuery={() => deleteQuery(queryId)}\n        />\n      ))\n    )(urlQuery),\n    [queryAsString, queryCount]\n  );\n\n  return (\n    <div className=\"query-bar\">\n      {queryInputs}\n      <NewQueryButton onClick={addQuery}/>\n    </div>\n  );\n};\n","import { fromFetch } from 'rxjs/fetch';\n\nconst corsAnywhere = 'https://cors-holy-water.herokuapp.com/';\n\nconst isProduction = process.env.NODE_ENV === \"production\";\nexport const observeCorsRequest = url =>\n  isProduction\n  ? fromFetch(`${corsAnywhere}${url}`)\n  : fromFetch(url);","import parser from 'fast-xml-parser';\r\nimport * as Rx from 'rxjs/operators';\r\nimport * as Observable from 'rxjs';\r\nimport { observeCorsRequest } from './corsRequest';\r\nconst xml = parser;\r\n\r\nconst escapeCharacter = char => {\r\n  switch (char) {\r\n    case '/': return '%2F';\r\n    case '?': return '%3F';\r\n    case '#': return '%23';\r\n    case '=': return '%3D';\r\n    case ':': return '%3A';\r\n    case ';': return '%3B';\r\n    case ' ': return '%20';\r\n    case '%': return '%25';\r\n    case '+': return '%2B';\r\n    default: return char;\r\n  }\r\n};\r\nconst escape = token => token.split().map(escapeCharacter).join();\r\n\r\nconst getTokenSuffix = token =>\r\n  token\r\n  ? `&resumptionToken=${escape(token)}`\r\n  : '';\r\n\r\nexport const getRecordSet$ = (token) =>\r\n  observeCorsRequest(\r\n      `https://philpapers.org/oai.pl?verb=ListRecords&metadataPrefix=oai_dc${getTokenSuffix(token)}`)\r\n  .pipe(\r\n    Rx.flatMap(response => response.text()),\r\n    Rx.flatMap(text => {\r\n      const {\r\n        record: records,\r\n        resumptionToken: token,\r\n      } = xml.parse(text)['OAI-PMH'].ListRecords;\r\n\r\n      return Observable.concat(\r\n        [records],\r\n        getRecordSet$(token)\r\n      );\r\n    })\r\n  );\r\n\r\nconst getLastPartOfPath = path => path.match(/^.*\\/(?<key>.*)$/).groups.key;\r\nconst getPropName = dcPropName => dcPropName.match(/^dc:(?<prop>\\w+)$/).groups.prop;\r\n\r\nconst getRecordMetadata = record => {\r\n  const metadata = {};\r\n  for (const [key, value] of Object.entries(record.metadata['oai_dc:dc'])) {\r\n    const prop = getPropName(key);\r\n    metadata[prop] = value;\r\n  }\r\n\r\n  metadata.title = metadata.title ? String(metadata.title) : null;\r\n  metadata.id = getLastPartOfPath(metadata.identifier);\r\n  delete metadata.identifier;\r\n\r\n  metadata.year = metadata.date;\r\n  delete metadata.date;\r\n\r\n  metadata.type = getLastPartOfPath(metadata.type);\r\n\r\n  metadata.author = metadata.creator;\r\n  delete metadata.creator;\r\n\r\n  return metadata;\r\n}\r\n\r\nexport const recordSet$ = getRecordSet$()\r\n  .pipe(\r\n    Rx.map(recordSet =>\r\n      recordSet\r\n        .map(getRecordMetadata)\r\n        .filter(record =>\r\n          record.language === 'en' &&\r\n          record.title &&\r\n          typeof record.year === 'number'\r\n        ),\r\n    ),\r\n  );\r\n\r\n  // ToDo: Figure out how to parse and decompress data from archive.\r\nconst getDoc = id => observeCorsRequest(`https://philPapers.org/archive/${id}`);\r\n\r\nconst apiId = '904518';\r\nconst apiKey = '5KLo4qkvXNl4t8s5';\r\n\r\nexport const category$ =\r\n  observeCorsRequest(\r\n      `https://philPapers.org/philpapers/raw/categories.json?apiId=${apiId}&apiKey=${apiKey}`)\r\n  .pipe(\r\n    Rx.flatMap(response => response.json()),\r\n    Rx.map(array => array[0])\r\n  );\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport * as R from 'ramda';\r\nimport stemmer from 'lancaster-stemmer';\r\nimport { splitOn, blackList, propNames } from '../dataSources/textUtilities';\r\n\r\nconst getWords = record =>\r\n  R.pipe(\r\n    R.chain(propName =>\r\n      record[propName]\r\n      ? record[propName].split(splitOn)\r\n      : []),\r\n    R.map(stemmer),\r\n    R.filter(stem =>\r\n      !R.isEmpty(stem) &&\r\n      R.isEmpty(R.match(blackList, stem))),\r\n    R.uniq,\r\n  )(propNames);\r\n\r\nexport const useRecordSets = (recordSet$) => {\r\n  // We've implemented our data store as a large mutable ref.\r\n  // We have no interest in old versions of the data\r\n  // and the constant copying & spreading caused significant slowdown.\r\n  // We track the total count of records with the useState hook to enforce that rerenders occur when new data is loaded.\r\n\r\n  const state = useRef({\r\n    records: {},\r\n    stemsToRecords: {},\r\n    yearsToRecords: {},\r\n  });\r\n  const [recordCount, setRecordCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const subscription = recordSet$.subscribe(recordSet => {\r\n\r\n      const {\r\n        records,\r\n        stemsToRecords,\r\n        yearsToRecords,\r\n      } = state.current;\r\n\r\n      for (const record of recordSet) {\r\n        records[record.id] = record;\r\n\r\n        for (const word of getWords(record)) {\r\n          if (stemsToRecords[word] === undefined) {\r\n            stemsToRecords[word] = [record.id];\r\n          } else {\r\n            stemsToRecords[word].push(record.id);\r\n          }\r\n        }\r\n\r\n        const { year } = record;\r\n        if (yearsToRecords[year] === undefined) {\r\n          yearsToRecords[year] = [record.id];\r\n        } else {\r\n          yearsToRecords[year].push(record.id);\r\n        }\r\n      }\r\n\r\n      setRecordCount(count => count + recordSet.length);\r\n    });\r\n    return () => subscription.unsubscribe();\r\n  }, [recordSet$]);\r\n\r\n  return { recordCount, state };\r\n};\r\n","import { useRecordSets } from '../hooks/useRecordSets';\nimport * as R from 'ramda';\nimport stemmer from 'lancaster-stemmer';\nimport { splitOn, blackList, propNames } from '../dataSources/textUtilities';\n\nexport const useGraphData = ({recordSet$, yearRange, queries}) => {\n  const [ start, end ] = yearRange;\n  const {\n    recordCount,\n    state,\n  } = useRecordSets(recordSet$);\n  const {\n    records,\n    stemsToRecords,\n    yearsToRecords,\n  } = state.current;\n\n  const queryIds = Object.keys(queries);\n  const getTotal = year => yearsToRecords[year]\n    ? yearsToRecords[year].length\n    : 0;\n\n  const getRecordIds = query => {\n    const recordIdSets = R.pipe(\n      R.split(splitOn),\n      R.map(stemmer),\n      R.filter(stem =>\n        !R.isEmpty(stem) &&\n        R.isEmpty(R.match(blackList, stem))),\n      R.map(stem => stemsToRecords[stem] || []),\n    )(query);\n    // using Array#.reduce instead of Ramda reduce\n    // because there's not a good seed argument I can provide.\n    return recordIdSets.length\n      ? recordIdSets.reduce(R.intersection)\n      : [];\n  };\n  const includesCaseInsensitive = (title, query) =>\n    title.toLowerCase().includes(query.toLowerCase());\n\n  const getRecords = query =>\n    R.pipe(\n    getRecordIds,\n      R.map(id => records[id]),\n      R.filter(record =>\n        R.any(prop =>\n          includesCaseInsensitive(record[prop], query), propNames)\n      ),\n    )(query)\n\n  const groupedByYear = R.pipe(\n    R.toPairs,\n    R.chain(([queryId, query]) =>\n      R.map(\n        record => ({ ...record, queryId }),\n        getRecords(query)\n      )\n    ),\n    R.groupBy(R.prop('year'))\n  )(queries);\n\n  const data = R.map(\n    year => {\n      const group = groupedByYear[year] || [];\n      const dataPoint = R.pipe(\n        R.map(queryId => {\n          const total = getTotal(year);\n          if (total === 0) return [queryId, 0];\n          const containingQuery = R.filter(R.propEq('queryId', queryId), group);\n          const percentage = 100 * containingQuery.length / total;\n          return [queryId, percentage];\n        }),\n        R.fromPairs,\n      )(queryIds);\n      dataPoint.year = year;\n      return dataPoint;\n    },\n    R.range(start, end + 1)\n  );\n  return data;\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Graph } from './Graph';\r\nimport { QueryBar } from './QueryBar';\r\nimport { recordSet$ } from '../dataSources/philPapers';\r\nimport { useUrlQuery } from '../hooks/useUrlQuery';\r\nimport { useGraphData } from '../hooks/useGraphData';\r\n\r\nconst colorMap = {\r\n  q0: 'blue',\r\n  q1: 'purple',\r\n  q2: 'green',\r\n  q3: 'grey',\r\n  q4: 'pink',\r\n  q5: 'yellow',\r\n};\r\n\r\nconst defaultState = {q0: 'good', q1: 'governance'};\r\n\r\nexport const App = () => {\r\n\r\n  const {\r\n    urlQuery,\r\n    addQuery,\r\n    setQuery,\r\n    deleteQuery\r\n  } = useUrlQuery(defaultState);\r\n\r\n  const yearRange = [2010, 2019];\r\n  const data = useGraphData({ recordSet$, yearRange, queries: urlQuery });\r\n\r\n  const queryIds = Object.keys(urlQuery);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header\">\r\n        <QueryBar\r\n          urlQuery={urlQuery}\r\n          setQuery={setQuery}\r\n          addQuery={addQuery}\r\n          deleteQuery={deleteQuery}\r\n          colorMap={colorMap}\r\n        />\r\n      </header>\r\n      <footer className=\"footer\">\r\n        <Graph\r\n          queryIds={Object.keys(urlQuery)}\r\n          colorMap={colorMap}\r\n          data={data}\r\n        />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { useState, useRef } from 'react';\nimport * as R from 'ramda';\nimport { getNumberFromQueryId } from '../dataSources/textUtilities';\n\nexport const useUrlQuery = initialQuery => {\n\n  const [dummy, setDummy] = useState(0);\n  const ref = useRef(null);\n\n  if (dummy === 0) {\n    ref.current = new URLSearchParams();\n\n    for (const [key, value] of Object.entries(initialQuery)) {\n      ref.current.append(key, value);\n    }\n  }\n  const urlSearchParams = ref.current;\n\n  const incrementDummy = () => setDummy(dummy => dummy + 1);\n  const syncWithURL = () => window.history.replaceState({}, '', `${window.location.pathname}?${urlSearchParams}`);\n\n  const setQuery = (queryId, query) => {\n    urlSearchParams.set(queryId, query);\n    syncWithURL();\n    incrementDummy();\n  }\n\n  const addQuery = () => {\n    const lastQueryId = R.compose(\n      R.last,\n      R.keys,\n    )(urlQuery);\n    const queryId = lastQueryId !== undefined\n      ? `q${getNumberFromQueryId(lastQueryId) + 1}`\n      : 'q0';\n    urlSearchParams.append(queryId, '');\n    syncWithURL();\n    incrementDummy();\n  }\n\n  const deleteQuery = queryId => {\n    urlSearchParams.delete(queryId);\n    syncWithURL();\n    incrementDummy();\n  }\n\n  const urlQuery = R.fromPairs(Array.from(urlSearchParams.entries()));\n\n  return { urlQuery, addQuery, setQuery, deleteQuery };\n}\n"],"sourceRoot":""}